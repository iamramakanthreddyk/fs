
openapi: 3.0.3
info:
  title: FuelSync Hub API
  description: Multi-tenant ERP system for fuel station networks
  version: 1.0.0
  contact:
    name: FuelSync Hub API Team
    email: api@fuelsync.com

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.fuelsync.com/api/v1
    description: Production server

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: User authentication and token management
  - name: SuperAdmin
    description: Platform administration endpoints
  - name: Tenants
    description: Tenant management operations
  - name: Users
    description: User management within tenants
  - name: Stations
    description: Fuel station management
  - name: Pumps
    description: Fuel pump management
  - name: Nozzles
    description: Fuel nozzle management
  - name: Readings
    description: Nozzle reading operations
  - name: Fuel Prices
    description: Fuel price management
  - name: Dashboard
    description: Dashboard metrics and analytics
  - name: Attendant
    description: Attendant-specific operations
  - name: Alerts
    description: System alerts and notifications

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    tenantId:
      name: x-tenant-id
      in: header
      description: Tenant ID for data isolation
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    # Common Schemas
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    # User and Auth Schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [superadmin, owner, manager, attendant]
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
        stationId:
          type: string
          format: uuid
        stationName:
          type: string
        createdAt:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    CreateUserRequest:
      type: object
      required: [name, email, password, role]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        role:
          type: string
          enum: [manager, attendant]
        stationId:
          type: string
          format: uuid

    # Tenant Schemas
    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [active, suspended, cancelled]
        planId:
          type: string
          format: uuid
        planName:
          type: string
        createdAt:
          type: string
          format: date-time
        userCount:
          type: integer
        stationCount:
          type: integer

    CreateTenantRequest:
      type: object
      required: [name, planId, ownerName, ownerEmail, ownerPassword]
      properties:
        name:
          type: string
        planId:
          type: string
          format: uuid
        ownerName:
          type: string
        ownerEmail:
          type: string
          format: email
        ownerPassword:
          type: string
          minLength: 6

    # Plan Schemas
    Plan:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
        maxStations:
          type: integer
        maxUsers:
          type: integer
        features:
          type: array
          items:
            type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    CreatePlanRequest:
      type: object
      required: [name, description, price, maxStations, maxUsers, features]
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        maxStations:
          type: integer
        maxUsers:
          type: integer
        features:
          type: array
          items:
            type: string

    # Station Schemas
    Station:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        address:
          type: string
        status:
          type: string
          enum: [active, inactive, maintenance]
        manager:
          type: string
        attendantCount:
          type: integer
        pumpCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        todaySales:
          type: number
        monthlySales:
          type: number
        salesGrowth:
          type: number

    CreateStationRequest:
      type: object
      required: [name, address, status]
      properties:
        name:
          type: string
        address:
          type: string
        status:
          type: string
          enum: [active, inactive, maintenance]

    # Pump Schemas
    Pump:
      type: object
      properties:
        id:
          type: string
          format: uuid
        label:
          type: string
        serialNumber:
          type: string
        status:
          type: string
          enum: [active, inactive, maintenance]
        stationId:
          type: string
          format: uuid

    CreatePumpRequest:
      type: object
      required: [label, serialNumber, status, stationId]
      properties:
        label:
          type: string
        serialNumber:
          type: string
        status:
          type: string
          enum: [active, inactive, maintenance]
        stationId:
          type: string
          format: uuid

    # Nozzle Schemas
    Nozzle:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nozzleNumber:
          type: integer
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        status:
          type: string
          enum: [active, inactive, maintenance]
        pumpId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    CreateNozzleRequest:
      type: object
      required: [pumpId, nozzleNumber, fuelType]
      properties:
        pumpId:
          type: string
          format: uuid
        nozzleNumber:
          type: integer
        fuelType:
          type: string
          enum: [petrol, diesel, premium]

    # Reading Schemas
    NozzleReading:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nozzleId:
          type: string
          format: uuid
        reading:
          type: number
        recordedAt:
          type: string
          format: date-time
        paymentMethod:
          type: string
          enum: [cash, card, upi, credit]
        creditorId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    CreateReadingRequest:
      type: object
      required: [nozzleId, reading, recordedAt, paymentMethod]
      properties:
        nozzleId:
          type: string
          format: uuid
        reading:
          type: number
        recordedAt:
          type: string
          format: date-time
        paymentMethod:
          type: string
          enum: [cash, card, upi, credit]
        creditorId:
          type: string
          format: uuid

    # Fuel Price Schemas
    FuelPrice:
      type: object
      properties:
        id:
          type: string
          format: uuid
        stationId:
          type: string
          format: uuid
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        price:
          type: number
        validFrom:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    CreateFuelPriceRequest:
      type: object
      required: [stationId, fuelType, price, validFrom]
      properties:
        stationId:
          type: string
          format: uuid
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        price:
          type: number
        validFrom:
          type: string
          format: date-time

    # Creditor Schemas
    Creditor:
      type: object
      properties:
        id:
          type: string
          format: uuid
        partyName:
          type: string
        contactPerson:
          type: string
        phoneNumber:
          type: string
        creditLimit:
          type: number
        outstandingAmount:
          type: number
        paymentTerms:
          type: string
        notes:
          type: string
        createdAt:
          type: string
          format: date-time

    CreateCreditorRequest:
      type: object
      required: [partyName]
      properties:
        partyName:
          type: string
        contactPerson:
          type: string
        phoneNumber:
          type: string
        creditLimit:
          type: number
        paymentTerms:
          type: string
        notes:
          type: string

    # Dashboard Schemas
    SalesSummary:
      type: object
      properties:
        totalRevenue:
          type: number
        totalVolume:
          type: number
        salesCount:
          type: integer
        averageTicketSize:
          type: number
        cashSales:
          type: number
        creditSales:
          type: number
        growthPercentage:
          type: number

    PaymentMethodBreakdown:
      type: object
      properties:
        method:
          type: string
        amount:
          type: number
        percentage:
          type: number
        count:
          type: integer

    # Attendant Schemas
    AttendantStation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        address:
          type: string
        status:
          type: string
          enum: [active, inactive, maintenance]
        assignedAt:
          type: string
          format: date-time

    CashReport:
      type: object
      properties:
        id:
          type: string
          format: uuid
        stationId:
          type: string
          format: uuid
        reportedBy:
          type: string
        cashAmount:
          type: number
        reportDate:
          type: string
          format: date
        shift:
          type: string
          enum: [morning, afternoon, night]
        notes:
          type: string
        createdAt:
          type: string
          format: date-time

    CreateCashReportRequest:
      type: object
      required: [stationId, cashAmount, reportDate, shift]
      properties:
        stationId:
          type: string
          format: uuid
        cashAmount:
          type: number
        reportDate:
          type: string
          format: date
        shift:
          type: string
          enum: [morning, afternoon, night]
        notes:
          type: string

    # Alert Schemas
    SystemAlert:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [warning, error, info]
        priority:
          type: string
          enum: [low, medium, high, critical]
        title:
          type: string
        message:
          type: string
        stationId:
          type: string
          format: uuid
        nozzleId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        acknowledged:
          type: boolean
        acknowledgedBy:
          type: string
        acknowledgedAt:
          type: string
          format: date-time

paths:
  # Authentication
  /auth/login:
    post:
      tags: [Authentication]
      summary: Authenticate user (Owner/Manager/Attendant)
      parameters:
        - $ref: '#/components/parameters/tenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/auth/login:
    post:
      tags: [Authentication]
      summary: Authenticate SuperAdmin user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LoginResponse'

  # SuperAdmin Dashboard
  /admin/dashboard:
    get:
      tags: [SuperAdmin]
      summary: Get SuperAdmin dashboard summary
      responses:
        '200':
          description: Dashboard summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenantCount:
                        type: integer
                      activeTenantCount:
                        type: integer
                      planCount:
                        type: integer
                      adminCount:
                        type: integer

  # Tenant Management
  /admin/tenants:
    get:
      tags: [SuperAdmin, Tenants]
      summary: List all tenants
      responses:
        '200':
          description: List of tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tenants:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tenant'

    post:
      tags: [SuperAdmin, Tenants]
      summary: Create new tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequest'
      responses:
        '201':
          description: Tenant created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Tenant'

  /admin/tenants/{tenantId}:
    get:
      tags: [SuperAdmin, Tenants]
      summary: Get tenant details
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tenant details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Tenant'

  /admin/tenants/{tenantId}/status:
    patch:
      tags: [SuperAdmin, Tenants]
      summary: Update tenant status
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, suspended, cancelled]
      responses:
        '200':
          description: Status updated successfully

  # Plan Management
  /admin/plans:
    get:
      tags: [SuperAdmin]
      summary: List all subscription plans
      responses:
        '200':
          description: List of plans
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      plans:
                        type: array
                        items:
                          $ref: '#/components/schemas/Plan'

    post:
      tags: [SuperAdmin]
      summary: Create new subscription plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanRequest'
      responses:
        '201':
          description: Plan created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Plan'

  # User Management
  /users:
    get:
      tags: [Users]
      summary: List users in tenant
      parameters:
        - $ref: '#/components/parameters/tenantId'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'

    post:
      tags: [Users]
      summary: Create new user (Owner only)
      parameters:
        - $ref: '#/components/parameters/tenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'

  # Station Management
  /stations:
    get:
      tags: [Stations]
      summary: List stations in tenant
      parameters:
        - $ref: '#/components/parameters/tenantId'
        - name: includeMetrics
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of stations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      stations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Station'

    post:
      tags: [Stations]
      summary: Create new station
      parameters:
        - $ref: '#/components/parameters/tenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStationRequest'
      responses:
        '201':
          description: Station created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Station'

  # Pump Management
  /pumps:
    get:
      tags: [Pumps]
      summary: List pumps for station
      parameters:
        - $ref: '#/components/parameters/tenantId'
        - name: stationId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of pumps
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      pumps:
                        type: array
                        items:
                          $ref: '#/components/schemas/Pump'

    post:
      tags: [Pumps]
      summary: Create new pump
      parameters:
        - $ref: '#/components/parameters/tenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePumpRequest'
      responses:
        '201':
          description: Pump created successfully

  # Nozzle Management
  /nozzles:
    get:
      tags: [Nozzles]
      summary: List nozzles for pump
      parameters:
        - $ref: '#/components/parameters/tenantId'
        - name: pumpId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of nozzles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      nozzles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Nozzle'

    post:
      tags: [Nozzles]
      summary: Create new nozzle
      parameters:
        - $ref: '#/components/parameters/tenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNozzleRequest'
      responses:
        '201':
          description: Nozzle created successfully

  # Reading Management
  /nozzle-readings:
    post:
      tags: [Readings]
      summary: Create nozzle reading
      parameters:
        - $ref: '#/components/parameters/tenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReadingRequest'
      responses:
        '201':
          description: Reading created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NozzleReading'

  /nozzle-readings/can-create/{nozzleId}:
    get:
      tags: [Readings]
      summary: Check if reading can be created for nozzle
      parameters:
        - $ref: '#/components/parameters/tenantId'
        - name: nozzleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      canCreate:
                        type: boolean
                      missingPrice:
                        type: boolean
                      reason:
                        type: string

  # Fuel Price Management
  /fuel-prices:
    get:
      tags: [Fuel Prices]
      summary: List fuel prices
      parameters:
        - $ref: '#/components/parameters/tenantId'
      responses:
        '200':
          description: List of fuel prices
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      prices:
                        type: array
                        items:
                          $ref: '#/components/schemas/FuelPrice'

    post:
      tags: [Fuel Prices]
      summary: Create fuel price
      parameters:
        - $ref: '#/components/parameters/tenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFuelPriceRequest'
      responses:
        '201':
          description: Fuel price created successfully

  /fuel-prices/validate/{stationId}:
    get:
      tags: [Fuel Prices]
      summary: Validate fuel prices for station
      parameters:
        - $ref: '#/components/parameters/tenantId'
        - name: stationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      stationId:
                        type: string
                        format: uuid
                      missingFuelTypes:
                        type: array
                        items:
                          type: string
                          enum: [petrol, diesel, premium]
                      hasActivePrices:
                        type: boolean

  # Dashboard Endpoints
  /dashboard/sales-summary:
    get:
      tags: [Dashboard]
      summary: Get sales summary
      parameters:
        - $ref: '#/components/parameters/tenantId'
        - name: range
          in: query
          schema:
            type: string
            enum: [daily, weekly, monthly, yearly]
            default: monthly
        - name: stationId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Sales summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SalesSummary'

  /dashboard/payment-methods:
    get:
      tags: [Dashboard]
      summary: Get payment method breakdown
      parameters:
        - $ref: '#/components/parameters/tenantId'
      responses:
        '200':
          description: Payment method breakdown
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PaymentMethodBreakdown'

  # Creditor Management
  /creditors:
    get:
      tags: [Creditors]
      summary: List creditors
      parameters:
        - $ref: '#/components/parameters/tenantId'
      responses:
        '200':
          description: List of creditors
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      creditors:
                        type: array
                        items:
                          $ref: '#/components/schemas/Creditor'

    post:
      tags: [Creditors]
      summary: Create creditor
      parameters:
        - $ref: '#/components/parameters/tenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCreditorRequest'
      responses:
        '201':
          description: Creditor created successfully

  # Attendant Endpoints
  /attendant/stations:
    get:
      tags: [Attendant]
      summary: Get assigned stations for attendant
      parameters:
        - $ref: '#/components/parameters/tenantId'
      responses:
        '200':
          description: List of assigned stations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      stations:
                        type: array
                        items:
                          $ref: '#/components/schemas/AttendantStation'

  /attendant/pumps:
    get:
      tags: [Attendant]
      summary: Get assigned pumps for attendant
      parameters:
        - $ref: '#/components/parameters/tenantId'
        - name: stationId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of assigned pumps
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      pumps:
                        type: array
                        items:
                          $ref: '#/components/schemas/Pump'

  /attendant/cash-reports:
    get:
      tags: [Attendant]
      summary: Get cash reports
      parameters:
        - $ref: '#/components/parameters/tenantId'
        - name: stationId
          in: query
          schema:
            type: string
            format: uuid
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of cash reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      reports:
                        type: array
                        items:
                          $ref: '#/components/schemas/CashReport'

    post:
      tags: [Attendant]
      summary: Submit cash report
      parameters:
        - $ref: '#/components/parameters/tenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCashReportRequest'
      responses:
        '201':
          description: Cash report submitted successfully

  /attendant/alerts:
    get:
      tags: [Attendant, Alerts]
      summary: Get system alerts for attendant
      parameters:
        - $ref: '#/components/parameters/tenantId'
      responses:
        '200':
          description: List of system alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      alerts:
                        type: array
                        items:
                          $ref: '#/components/schemas/SystemAlert'

  /attendant/alerts/{alertId}/acknowledge:
    put:
      tags: [Attendant, Alerts]
      summary: Acknowledge alert
      parameters:
        - $ref: '#/components/parameters/tenantId'
        - name: alertId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Alert acknowledged successfully

  # System Alerts
  /alerts:
    get:
      tags: [Alerts]
      summary: Get system alerts
      parameters:
        - $ref: '#/components/parameters/tenantId'
        - name: stationId
          in: query
          schema:
            type: string
            format: uuid
        - name: unreadOnly
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      alerts:
                        type: array
                        items:
                          $ref: '#/components/schemas/SystemAlert'

    post:
      tags: [Alerts]
      summary: Create system alert
      parameters:
        - $ref: '#/components/parameters/tenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, priority, title, message]
              properties:
                type:
                  type: string
                  enum: [warning, error, info]
                priority:
                  type: string
                  enum: [low, medium, high, critical]
                title:
                  type: string
                message:
                  type: string
                stationId:
                  type: string
                  format: uuid
                nozzleId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Alert created successfully

  /alerts/summary:
    get:
      tags: [Alerts]
      summary: Get alert summary by priority
      parameters:
        - $ref: '#/components/parameters/tenantId'
      responses:
        '200':
          description: Alert summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                      critical:
                        type: integer
                      high:
                        type: integer
                      medium:
                        type: integer
                      low:
                        type: integer
                      unacknowledged:
                        type: integer
